AWSTemplateFormatVersion: '2010-09-09'
Description: Test Template for cft-tool. Should have zero cost
Parameters:


  pVPCName:
    Description: VPC Name
    Type: String
    Default: MyTestVPC

  pFirstAzName:
    Description: Availability Zone 1 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-1a

  pSecondAzName:
    Description: Availability Zone 2 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-1b

  pThirdAzName:
    Description: Availability Zone 3 Name in Region
    Type: String
    Default: ''

  pVpcCIDR:
    Description: CIDR block for VPC
    Type: String
    Default: 10.100.0.0/16

  pFirstDMZSubnetCIDR:
    Description: CIDR block for DMZ Subnet A
    Type: String
    Default: 10.100.0.0/24

  pSecondDMZSubnetCIDR:
    Description: CIDR block for DMZ Subnet B
    Type: String
    Default: 10.100.1.0/24

  pThirdDMZSubnetCIDR:
    Description: CIDR block for DMZ Subnet C
    Type: String
    Default: Unused

  pFirstPrivateSubnetCIDR:
    Description: CIDR block for Private Subnet A
    Type: String
    Default: 10.100.2.0/24

  pSecondPrivateSubnetCIDR:
    Description: CIDR block for Private Subnet B
    Type: String
    Default: 10.100.3.0/24

  pThirdPrivateSubnetCIDR:
    Description: CIDR block for Private Subnet C
    Type: String
    Default: Unused


Conditions:
  condThreeAZ: !Not [!Equals [!Ref 'pThirdAzName', '']]

Resources:
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'pVpcCIDR'
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Ref 'pVPCName'

  rFirstDMZSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 'pFirstDMZSubnetCIDR'
      AvailabilityZone: !Ref 'pFirstAzName'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', DMZ-Subnet, !Ref 'pFirstAzName']]

  rSecondDMZSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 'pSecondDMZSubnetCIDR'
      AvailabilityZone: !Ref 'pSecondAzName'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', DMZ-Subnet, !Ref 'pSecondAzName']]

  rThirdDMZSubnet:
    Type: AWS::EC2::Subnet
    Condition: condThreeAZ
    Properties:
      CidrBlock: !Ref 'pThirdDMZSubnetCIDR'
      AvailabilityZone: !Ref 'pThirdAzName'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', DMZ-Subnet, !Ref 'pThirdAzName']]

  rFirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 'pFirstPrivateSubnetCIDR'
      AvailabilityZone: !Ref 'pFirstAzName'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', Private-Subnet, !Ref 'pFirstAzName']]

  rSecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 'pSecondPrivateSubnetCIDR'
      AvailabilityZone: !Ref 'pSecondAzName'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', Private-Subnet, !Ref 'pSecondAzName']]

  rThirdPrivateSubnet:
    Type: AWS::EC2::Subnet
    Condition: condThreeAZ
    Properties:
      CidrBlock: !Ref 'pThirdPrivateSubnetCIDR'
      AvailabilityZone: !Ref 'pThirdAzName'
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', Private-Subnet, !Ref 'pThirdAzName']]

  rIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', iGW]]

  rGWAttachmentIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: rIGW
    Properties:
      VpcId: !Ref 'rVPC'
      InternetGatewayId: !Ref 'rIGW'

  rRouteIGW:
    Type: AWS::EC2::Route
    DependsOn: rGWAttachmentIGW
    Properties:
      RouteTableId: !Ref 'rDMZRouteTable'
      GatewayId: !Ref 'rIGW'
      DestinationCidrBlock: 0.0.0.0/0

  rDMZRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', DMZRouteTable]]

  rFirstDMZRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rDMZRouteTable'
      SubnetId: !Ref 'rFirstDMZSubnet'

  rSecondDMZRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rDMZRouteTable'
      SubnetId: !Ref 'rSecondDMZSubnet'

  rThirdDMZRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: condThreeAZ
    Properties:
      RouteTableId: !Ref 'rDMZRouteTable'
      SubnetId: !Ref 'rThirdDMZSubnet'

  rFirstPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', PrivateNetRouteTable, !Ref 'pFirstAzName']]


  rFirstPrivateRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rFirstPrivateRouteTable'
      SubnetId: !Ref 'rFirstPrivateSubnet'

  rSecondPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', PrivateNetRouteTable, !Ref 'pSecondAzName']]


  rSecondPrivateRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rSecondPrivateRouteTable'
      SubnetId: !Ref 'rSecondPrivateSubnet'

  rThirdPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: condThreeAZ
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', PrivateNetRouteTable, !Ref 'pThirdAzName']]


  rThirdPrivateRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: condThreeAZ
    Properties:
      RouteTableId: !Ref 'rThirdPrivateRouteTable'
      SubnetId: !Ref 'rThirdPrivateSubnet'

  rDMZNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', DMZ-NACL]]


  rDMZNACLRuleAllowVPCEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref 'pVpcCIDR'
      Egress: true
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '201'
      NetworkAclId: !Ref 'rDMZNacl'
  rDMZNACLRuleDenyInternalEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: true
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '211'
      NetworkAclId: !Ref 'rDMZNacl'
  rDMZNACLRuleAllowAllEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '299'
      NetworkAclId: !Ref 'rDMZNacl'
  rDMZNACLRuleAllowAllIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '101'
      NetworkAclId: !Ref 'rDMZNacl'

  rFirstDMZNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'rDMZNacl'
      SubnetId: !Ref 'rFirstDMZSubnet'
  rSecondDMZNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'rDMZNacl'
      SubnetId: !Ref 'rSecondDMZSubnet'
  rThirdDMZNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: condThreeAZ
    Properties:
      NetworkAclId: !Ref 'rDMZNacl'
      SubnetId: !Ref 'rThirdDMZSubnet'

  rNaclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'rVPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', Private-NACL]]

  rNACLRuleAllowAllEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref 'rNaclPrivate'
  rNACLRuleAllowDMZIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref 'pVpcCIDR'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '201'
      NetworkAclId: !Ref 'rNaclPrivate'
  rNACLRuleAllowAllInternal:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.0.0.0/8
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '211'
      NetworkAclId: !Ref 'rNaclPrivate'
  rNACLRuleAllowAllEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      RuleNumber: '221'
      NetworkAclId: !Ref 'rNaclPrivate'
  rNACLRuleAllowAllPing:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.0.0.0/8
      Protocol: '1'
      Icmp:
        Code: '-1'
        Type: '-1'
      RuleAction: allow
      RuleNumber: '231'
      NetworkAclId: !Ref 'rNaclPrivate'

  rFirstPrivateNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'rNaclPrivate'
      SubnetId: !Ref 'rFirstPrivateSubnet'
  rSecondPrivateNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'rNaclPrivate'
      SubnetId: !Ref 'rSecondPrivateSubnet'
  rThirdPrivateNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: condThreeAZ
    Properties:
      NetworkAclId: !Ref 'rNaclPrivate'
      SubnetId: !Ref 'rThirdPrivateSubnet'

  rVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: '*'
          Effect: Allow
          Resource: '*'
          Principal: '*'
      RouteTableIds:
      - !Ref 'rDMZRouteTable'
      - !Ref 'rFirstPrivateRouteTable'
      - !Ref 'rSecondPrivateRouteTable'
      - !If [condThreeAZ, !Ref 'rThirdPrivateRouteTable', !Ref 'AWS::NoValue']
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'rVPC'

  rVPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pVPCName', vGW]]


  rVPNGatewayAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'rVPC'
      VpnGatewayId: !Ref 'rVPNGateway'



Outputs:
  VpcId:
    Description: VPC ID Created
    Value: !Ref 'rVPC'
  StackName:
    Description: StackName
    Value: !Ref 'AWS::StackName'
  FirstDMZSubnet:
    Description: Subnet ID of the First DMZ Subnet
    Value: !Ref 'rFirstDMZSubnet'
  SecondDMZSubnet:
    Description: Subnet ID of the 2nd DMZ Subnet
    Value: !Ref 'rSecondDMZSubnet'
  ThirdDMZSubnet:
    Description: Subnet ID of the 3rd DMZ Subnet
    Condition: condThreeAZ
    Value: !Ref 'rThirdDMZSubnet'
  FirstPrivateSubnet:
    Description: Subnet ID of the First Private Subnet
    Value: !Ref 'rFirstPrivateSubnet'
  SecondPrivateSubnet:
    Description: Subnet ID of the 2nd Private Subnet
    Value: !Ref 'rSecondPrivateSubnet'
  ThirdPrivateSubnet:
    Description: Subnet ID of the 3rd Private Subnet
    Condition: condThreeAZ
    Value: !Ref 'rThirdPrivateSubnet'
